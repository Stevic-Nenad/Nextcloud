# This workflow orchestrates the entire lifecycle of the environment.
# It is triggered manually, providing a "one-click" way to build or destroy everything.

name: Full Environment Lifecycle

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: "setup" to build infra and deploy, or "destroy" to tear down.'
        required: true
        type: choice
        options:
          - setup
          - destroy

jobs:
  # ==================================================================================
  # == SETUP PATH: Triggered when 'setup' is selected                             ==
  # ==================================================================================
  terraform-apply:
    name: "Setup: 1. Terraform Apply"
    if: github.event.inputs.action == 'setup'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      # These outputs are passed to subsequent jobs.
      eks_cluster_name: ${{ steps.tf_outputs.outputs.eks_cluster_name }}
      rds_host: ${{ steps.tf_outputs.outputs.rds_host }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.CICD_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=./terraform init

      - name: Terraform Apply
        run: terraform -chdir=./terraform apply -auto-approve

      - name: Get Terraform Outputs for next job
        id: tf_outputs
        run: |
          cd ./terraform
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
          # Strip the :5432 port from the RDS endpoint
          RDS_ENDPOINT=$(terraform output -raw rds_instance_endpoint)
          RDS_HOST=${RDS_ENDPOINT%:*}
          echo "rds_host=$RDS_HOST" >> $GITHUB_OUTPUT

  deploy-application:
    name: "Setup: 2. Deploy Application"
    if: github.event.inputs.action == 'setup'
    needs: terraform-apply # Depends on the successful infrastructure creation
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/reusable-deploy-app.yml
    with:
      EKS_CLUSTER_NAME: ${{ needs.terraform-apply.outputs.eks_cluster_name }}
      RDS_DB_HOST: ${{ needs.terraform-apply.outputs.rds_host }}
    secrets: inherit # Pass all secrets down to the reusable workflow

  # ==================================================================================
  # == DESTROY PATH: Triggered when 'destroy' is selected                           ==
  # ==================================================================================
  get-destroy-data:
    name: "Teardown: 1. Get Data"
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      eks_cluster_name: ${{ steps.tf_outputs.outputs.eks_cluster_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.CICD_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=./terraform init
      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          cd ./terraform
          # '|| true' ensures this step succeeds even if the infra doesn't exist, making the job fault-tolerant.
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name || true)" >> $GITHUB_OUTPUT

  helm-uninstall:
    name: "Teardown: 2. Uninstall Application"
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    needs: get-destroy-data
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.CICD_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Configure Kubectl
        if: needs.get-destroy-data.outputs.eks_cluster_name != ''
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ needs.get-destroy-data.outputs.eks_cluster_name }}
          echo "Kubeconfig configured for cluster: ${{ needs.get-destroy-data.outputs.eks_cluster_name }}"
      - name: Setup Helm
        uses: azure/setup-helm@v4
      - name: Uninstall Helm Release
        if: needs.get-destroy-data.outputs.eks_cluster_name != ''
        run: |
          # '|| true' ensures this step succeeds even if the Helm release is already gone.
          helm uninstall nextcloud -n nextcloud || true
          # IMPORTANT: Wait to allow AWS to de-register the Load Balancer before Terraform tries to delete its dependencies.
          echo "Waiting 60 seconds for Load Balancer to de-register..."
          sleep 60

  terraform-destroy:
    name: "Teardown: 3. Terraform Destroy"
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    needs: helm-uninstall
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.CICD_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=./terraform init
      - name: Terraform Destroy
        run: terraform -chdir=./terraform destroy -auto-approve